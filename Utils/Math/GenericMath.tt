<#@ template language="C#v3.5" #>
<#@ output extension=".cs" encoding="utf-8"#>
<#@ assembly name="System.Core"#>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
// This is an independent project of an individual developer. Dear PVS-Studio, please check it.
// PVS-Studio Static Code Analyzer for C, C++, C#, and Java: http://www.viva64.com

using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;

namespace Common_Library.Utils.Math
{   <#
    List<String> unmanagedTypes = new List<String>
    {
        nameof(Char),
        nameof(SByte),
        nameof(Byte),
        nameof(Int16),
        nameof(UInt16),
        nameof(Int32),
        nameof(UInt32),
        nameof(Int64),
        nameof(UInt64),
        nameof(Single),
        nameof(Double),
        nameof(Decimal)
    };

    Dictionary<String, String> operandName = new Dictionary<String, String>
    {
        {"+", "Add"},
        {"-", "Substract"},
        {"*", "Multiply"},
        {"/", "Divide"},
        {"%", "Modulo"},
        {"&", "And"},
        {"|", "Or"},
        {"^", "Xor"},
        {"~", "Invert"},
        {"| |", "Abs"},
        {"-| |", "Negative"},
        {"==", "Equal"},
        {"!=", "NotEqual"},
        {">", "Greater"},
        {">=", "GreaterEqual"},
        {"<", "Less"},
        {"<=", "LessEqual"}
    };

    Boolean IsSmallType(String type)
    {
        return type == nameof(Char) || type == nameof(Byte) || type == nameof(SByte) || type == nameof(Int16) || type == nameof(UInt16);
    }

    Boolean IsUnsignedType(String type)
    {
        return type == nameof(Char) || type == nameof(Byte) || type == nameof(UInt16) || type == nameof(UInt32) || type == nameof(UInt64);
    }

    void ForEach(IEnumerable<String> types, Action<String> action)
    {
        String[] etype = types.ToArray();

        for (Int32 i = 0; i < etype.Length; i++)
        {
            action(etype[i]);

            if (i <= etype.Length - 2)
            {
                WriteLine(String.Empty);
            }
        }
    }

    void Functions(String @operator)
    {
        Boolean comparison = @operator == "==" || @operator == "!=" ||
                             @operator == ">" || @operator == ">=" ||
                             @operator == "<" || @operator == "<=";

        Boolean unary = @operator == "~" || @operator == "| |" || @operator == "-| |";

        WriteLine("\t\t[MethodImpl(MethodImplOptions.AggressiveInlining)]");

        WriteLine($"\t\tpublic static {(comparison ? nameof(Boolean) : "T")} {operandName[@operator]}<T>({(unary ? "T value" : "T left, T right")}) where T : unmanaged, IComparable");

        WriteLine("\t\t{");

        foreach (
            String type in
                unmanagedTypes.Where(type => type != nameof(Single) && type != nameof(Double) && type != nameof(Decimal) || @operator != "&" && @operator != "|" && @operator != "^"))
        {
            Boolean unsigned = IsUnsignedType(type);
            Boolean small = IsSmallType(type);

            if (unsigned && (@operator == "| |" || @operator == "-| |") || @operator == "~" && (type == nameof(Single) || type == nameof(Double) || type == nameof(Decimal)))
            {
                continue;
            }

            WriteLine($"\t\t\tif (typeof(T) == typeof({type}))");
            WriteLine("\t\t\t{");

#if !unsafe

            String expression = $"Unsafe.As<T, {type}>(ref left) {@operator} Unsafe.As<T, {type}>(ref right)";

            if (!comparison && small)
            {
                expression = $"({type})({expression})";
            }


            if (comparison)
            {
                if ((type == nameof(Single) || type == nameof(Double)) && (@operator == "==" || @operator == "!="))
                {
                    expression = $"Unsafe.As<T, {type}>(ref left) - Unsafe.As<T, {type}>(ref right) {{0}} {type}.Epsilon";

                    expression = @operator switch
                    {
                        "==" => String.Format(expression, "<"),
                        "!=" => String.Format(expression, ">"),
                        _ => throw new NotSupportedException()
                        };
                }
                WriteLine($"\t\t\t\treturn {expression};");
            }
            else if (unary)
            {
                switch (@operator)
                {
                    case "~":
                        WriteLine($"\t\t\t\t{(small ? nameof(Int32) : $"{type}")} {(small ? "i" : "val")} = ~Unsafe.As<T, {type}>(ref value);");
                        if (small)
                        {
                            WriteLine($"\t\t\t\t{type} val = Unsafe.As<{nameof(Int32)}, {type}>(ref i);");
                        }

                        WriteLine($"\t\t\t\treturn Unsafe.As<{type}, T>(ref val);");
                        break;
                    case "| |":
                        WriteLine($"\t\t\t\t{type} val = System.Math.Abs(Unsafe.As<T, {type}>(ref value));");
                        WriteLine($"\t\t\t\treturn Unsafe.As<{type}, T>(ref val);");
                        break;
                    case "-| |":
                        WriteLine($"\t\t\t\t{(small ? nameof(Int32) : $"{type}")} {(small ? "i" : "val")} = -System.Math.Abs(Unsafe.As<T, {type}>(ref value));");
                        if (small)
                        {
                            WriteLine($"\t\t\t\t{type} val = Unsafe.As<{nameof(Int32)}, {type}>(ref i);");
                        }
                        WriteLine($"\t\t\t\treturn Unsafe.As<{type}, T>(ref val);");
                        break;
                    default:
                        throw new NotSupportedException();
                }
            }
            else
            {
                WriteLine($"\t\t\t\t{type} value = {expression};");
                WriteLine($"\t\t\t\treturn Unsafe.As<{type}, T>(ref value);");
            }


#else

            String expression;

            if ((type == "Single" || type == "Double") && (methodName == "Equals" || methodName == "NotEquals"))
            {
                expression = $"(T)(Object)(Math.Abs(({type})(Object)left - ({type})(Object)right) {{0}} {type}.Epsilon)";
                
                expression = methodName switch
                {
                    "Equals" => String.Format(expression, operandName["Less"]),
                    "NotEquals" => String.Format(expression, operandName["More"]),
                    _ => throw new NotSupportedException()
                    };
            }
            else
            {
                expression = $"(T)(Object)(({type})(Object)left {@operator} ({type})(Object)right)";
            }
            

            expression = $"return {expression}";
            
            WriteLine($"\t\t\t\t\t{expression};");

#endif

            WriteLine("\t\t\t}");
            WriteLine(String.Empty);
        }

        WriteLine($"\t\t\tthrow new NotSupportedException($\"Operator {@operator} is not supported for {{typeof(T)}} type\");");
        WriteLine("\t\t}");
        WriteLine(String.Empty);
    }

    void RangeFunc(String type)
    {
        WriteLine($"\t\tpublic static IEnumerable<{type}> {nameof(Range)}({type} start = 0, {type} stop = {type}.MaxValue, {type} step = 1)");
        WriteLine("\t\t{");
        WriteLine($"\t\t\tfor ({type} i = start; start < stop; start += step)");
        WriteLine("\t\t\t{");
        WriteLine("\t\t\t\tyield return i;");
        WriteLine("\t\t\t}");
        WriteLine("\t\t}");
    }
    
    void Range()
    {
        ForEach(unmanagedTypes.Where(type => type != nameof(Char)), RangeFunc);
    }

    void ToRangeFunc(String type)
    {
        const Boolean defaultLooped = false;
        String looped = defaultLooped.ToString().ToLower();

        String func =
            $"public static {{0}} {nameof(ToRange)}({{1}}{type} value, {type} minimum = {(type == "Char" ? $"{type}.MinValue" : "0")}, {type} maximum = {type}.MaxValue, Boolean looped = {looped})";

        WriteLine("\t\t[MethodImpl(MethodImplOptions.AggressiveInlining)]");
        WriteLine($"\t\t{String.Format(func, "void", "ref ")}");
        WriteLine("\t\t{");
        WriteLine($"\t\t\t value = {nameof(ToRange)}(value, minimum, maximum, looped);");
        WriteLine("\t\t}");
        WriteLine(String.Empty);

        WriteLine("\t\t[MethodImpl(MethodImplOptions.AggressiveInlining)]");
        WriteLine($"\t\t{String.Format(func, type, String.Empty)}");
        WriteLine("\t\t{");
        WriteLine("\t\t\tif (value > maximum)");
        WriteLine("\t\t\t{");
        WriteLine("\t\t\t\treturn looped ? minimum : maximum;");
        WriteLine("\t\t\t}");
        WriteLine(String.Empty);
        WriteLine("\t\t\tif (value < minimum)");
        WriteLine("\t\t\t{");
        WriteLine("\t\t\t\treturn looped ? maximum : minimum;");
        WriteLine("\t\t\t}");
        WriteLine(String.Empty);
        WriteLine("\t\t\treturn value;");
        WriteLine("\t\t}");
    }

    void ToRange()
    {
        ForEach(unmanagedTypes, ToRangeFunc);
    }

    void InRangeFunc(String type)
    {
        WriteLine("\t\t[MethodImpl(MethodImplOptions.AggressiveInlining)]");
        WriteLine(
            $"\t\tpublic static Boolean {nameof(InRange)}({type} value, Position comparison = Position.LeftRight, {type} minimum = {(type == "Char" ? $"{type}.MinValue" : "0")}, {type} maximum = {type}.MaxValue)");
        WriteLine("\t\t{");
        WriteLine("\t\t\treturn comparison switch");
        WriteLine("\t\t\t{");
        WriteLine("\t\t\t\tPosition.None => value > minimum && value < maximum,");
        WriteLine("\t\t\t\tPosition.Left => value >= minimum && value < maximum,");
        WriteLine("\t\t\t\tPosition.Right => value > minimum && value <= maximum,");
        WriteLine("\t\t\t\tPosition.LeftRight => value >= minimum && value <= maximum,");
        WriteLine("\t\t\t\t_ => throw new NotSupportedException(comparison.ToString())");
        WriteLine("\t\t\t};");
        WriteLine("\t\t}");
    }

    void InRange()
    {
        ForEach(unmanagedTypes, InRangeFunc);
    }

    void AbsFunc(String type)
    {
        WriteLine("\t\t[MethodImpl(MethodImplOptions.AggressiveInlining)]");
        WriteLine($"\t\tpublic static {type} Abs(this {type} value)");
        WriteLine("\t\t{");

        if (IsSmallType(type))
        {
            if (IsUnsignedType(type))
            {
                WriteLine("\t\t\treturn value;");
            }
            else
            {
                WriteLine("\t\t\tif (value >= 0)");
                WriteLine("\t\t\t{");
                WriteLine("\t\t\t\treturn value;");
                WriteLine("\t\t\t}");
                WriteLine(String.Empty);
                WriteLine($"\t\t\t{nameof(Int32)} val = -value;");
                WriteLine($"\t\t\treturn Unsafe.As<{nameof(Int32)}, {type}>(ref val);");
            }
        }
        else
        {
            WriteLine($"\t\t\treturn {(IsUnsignedType(type) ? "value" : "value >= 0 ? value : -value")};");
        }

        WriteLine("\t\t}");
    }

    void Abs()
    {
        ForEach(unmanagedTypes, AbsFunc);
    }

#>

    public static partial class MathUtils
    {
<#
    Range();
    WriteLine(String.Empty);
    ToRange();
    WriteLine(String.Empty);
    InRange();
    WriteLine(String.Empty);
    Abs();
#>
    }

    [SuppressMessage("ReSharper", "InvertIf")]
    public static class MathUnsafe
    {
<#
    foreach (String @operator in operandName.Keys)
    {
        Functions(@operator);
    }
#>
    }
}