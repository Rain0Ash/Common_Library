<#@ template language="C#v3.5" #>
<#@ output extension=".cs" encoding="utf-8"#>
<#@ assembly name="System.Core"#>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
// This is an independent project of an individual developer. Dear PVS-Studio, please check it.
// PVS-Studio Static Code Analyzer for C, C++, C#, and Java: http://www.viva64.com

using System;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;

namespace Common_Library.Utils.Math
{   <#
    List<String> unmanagedTypes = new List<String>
    {
        "Char", "SByte", "Byte", "Int16", "UInt16", "Int32", "UInt32", "Int64", "UInt64", "Single", "Double", "Decimal"
    };
    
    Dictionary<String, String> operandName = new Dictionary<String, String>
    {
        {"Add", "+"},
        {"Substract", "-"},
        {"Multiply", "*"},
        {"Divide", "/"},
        {"Modular", "%"},
        {"And", "&"},
        {"Or", "|"},
        {"Xor", "^"},
        /*
        {"Equals", "=="},
        {"NotEquals", "!="},
        {"More", ">"},
        {"MoreEquals", ">="},
        {"Less", "<"},
        {"LessEquals", "<="},
        */
    };

    void Functions(String methodName, String @operator)
    {
        WriteLine("\t\t\t[MethodImpl(MethodImplOptions.AggressiveInlining)]");
        WriteLine($"\t\t\tpublic static T {methodName}<T>(T left, T right) where T : unmanaged");
        WriteLine("\t\t\t{");
        
        foreach (String type in unmanagedTypes.Where(type => type != "Single" && type != "Double" && type != "Decimal" || @operator != "&" && @operator != "|" && @operator != "^"))
        {
            WriteLine($"\t\t\t\tif (typeof(T) == typeof({type}))");
            WriteLine("\t\t\t\t{");
            
            #if unsafe
            
            String expression = $"Unsafe.As<T, {type}>(ref left) {@operator} Unsafe.As<T, {type}>(ref right)";
                
            if (type == "Char" || type == "Byte" || type == "SByte" || type == "Int16" || type == "UInt16")
            {
                expression = $"({type})({expression})";
            }
                
            WriteLine($"\t\t\t\t\t{type} value = {expression};");
            WriteLine($"\t\t\t\t\treturn Unsafe.As<{type}, T>(ref value);");
            
            #else

            String expression;

            if ((type == "Single" || type == "Double") && (methodName == "Equals" || methodName == "NotEquals"))
            {
                expression = $"(T)(Object)(Math.Abs(({type})(Object)left - ({type})(Object)right) {{0}} {type}.Epsilon)";
                
                expression = methodName switch
                {
                    "Equals" => String.Format(expression, operandName["Less"]),
                    "NotEquals" => String.Format(expression, operandName["More"]),
                    _ => throw new NotSupportedException()
                    };
            }
            else
            {
                expression = $"(T)(Object)(({type})(Object)left {@operator} ({type})(Object)right)";
            }
            

            expression = $"return {expression}";
            
            WriteLine($"\t\t\t\t\t{expression};");

            #endif
            
            WriteLine("\t\t\t\t}");
            WriteLine(String.Empty);
        }
        
        WriteLine($"\t\t\t\tthrow new NotSupportedException($\"Operator {@operator} is not supported for {{typeof(T)}} type\");");
        WriteLine("\t\t\t}");
        WriteLine(String.Empty);
    }

    void Range()
    {
        const Boolean defaultLooped = false;
        String looped = defaultLooped.ToString().ToLower();
        
        foreach (String type in unmanagedTypes)
        {
            String func = $"public static {{0}} {nameof(Range)}({{1}}{type} value, {type} minimum = {(type == "Char" ? $"{type}.MinValue" : "0")}, {type} maximum = {type}.MaxValue, Boolean looped = {looped})";
            
            WriteLine("\t\t[MethodImpl(MethodImplOptions.AggressiveInlining)]");
            WriteLine($"\t\t{String.Format(func, "void", "ref ")}");
            WriteLine("\t\t{");
            WriteLine($"\t\t\t value = {nameof(Range)}(value, minimum, maximum, looped);");
            WriteLine("\t\t}");
            WriteLine(String.Empty);
            
            WriteLine("\t\t[MethodImpl(MethodImplOptions.AggressiveInlining)]");
            WriteLine($"\t\t{String.Format(func, type, String.Empty)}");
            WriteLine("\t\t{");
            WriteLine("\t\t\tif (value > maximum)");
            WriteLine("\t\t\t{");
            WriteLine("\t\t\t\treturn looped ? minimum : maximum;");
            WriteLine("\t\t\t}");
            WriteLine(String.Empty);
            WriteLine("\t\t\tif (value < minimum)");
            WriteLine("\t\t\t{");
            WriteLine("\t\t\t\treturn looped ? maximum : minimum;");
            WriteLine("\t\t\t}");
            WriteLine(String.Empty);
            WriteLine("\t\t\treturn value;");
            WriteLine("\t\t}");
            WriteLine(String.Empty);
        }
    }
    
    void InRange()
    {
        foreach (String type in unmanagedTypes)
        {
            WriteLine("\t\t[MethodImpl(MethodImplOptions.AggressiveInlining)]");
            WriteLine($"\t\tpublic static Boolean {nameof(InRange)}({type} value, Position comparison = Position.LeftRight, {type} minimum = {(type == "Char" ? $"{type}.MinValue" : "0")}, {type} maximum = {type}.MaxValue)");
            WriteLine("\t\t{");
            WriteLine("\t\t\treturn comparison switch");
            WriteLine("\t\t\t{");
            WriteLine("\t\t\t\tPosition.None => value > minimum && value < maximum,");
            WriteLine("\t\t\t\tPosition.Left => value >= minimum && value < maximum,");
            WriteLine("\t\t\t\tPosition.Right => value > minimum && value <= maximum,");
            WriteLine("\t\t\t\tPosition.LeftRight => value >= minimum && value <= maximum,");
            WriteLine("\t\t\t\t_ => throw new NotSupportedException(comparison.ToString())");
            WriteLine("\t\t\t};");
            
            WriteLine("\t\t}");
            WriteLine(String.Empty);
        }
    }

#>

    public static partial class MathUtils
    {
        [SuppressMessage("ReSharper", "InvertIf")]
        public static class Unsafe
        {
<#foreach (KeyValuePair<String, String> methodName in operandName)
{
    Functions(methodName.Key, methodName.Value);
} 
#>
        }
<#
WriteLine(String.Empty);
Range();
InRange();#>
    }
}